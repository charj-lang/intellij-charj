/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.phodal.charj.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.phodal.charj.lexer.CharjTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_CharjLexer.flex</tt>
 */
public class _CharjLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\0\1\7\1\0\1\44\2\0\1\45\1\46\1\47\1\4\1\0"+
    "\1\42\2\0\1\3\12\6\1\36\1\37\1\0\1\43\3\0\1\5\1\65\1\5\1\50\1\51\1\52\1\66"+
    "\1\5\1\61\1\5\1\54\2\5\1\62\1\57\2\5\1\60\1\63\1\67\1\64\1\5\1\56\1\5\1\55"+
    "\1\5\1\0\1\10\2\0\1\53\1\0\1\21\1\33\1\15\1\35\1\22\1\26\1\20\1\32\1\23\1"+
    "\5\1\17\1\27\1\24\1\30\1\25\1\16\1\5\1\13\1\11\1\12\1\14\1\5\1\31\1\5\1\34"+
    "\1\5\1\40\1\0\1\41\7\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1"+
    "\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\15\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\4\4\1\20\1\0\1\5\1\0\6\4\1\21"+
    "\3\4\1\22\1\23\12\4\1\24\1\4\1\25\1\4"+
    "\1\26\1\0\4\4\1\27\3\4\1\30\2\4\1\31"+
    "\2\4\1\32\1\33\1\34\6\4\1\35\1\36\2\4"+
    "\1\37\3\4\1\40\1\41\7\4\1\42\11\4\1\43"+
    "\1\4\1\44\1\45\1\46\1\47\1\4\1\50\1\51"+
    "\1\52\2\4\1\53\1\4\1\54\2\4\1\55\2\4"+
    "\1\56\1\57\3\4\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\70\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\340\0\u0738\0\u0770\0\u07a8\0\340"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\70\0\u0a48\0\340\0\u0a80\0\340"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\340\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\340\0\u0c78\0\u0cb0\0\340\0\u0ce8\0\u0d20\0\340"+
    "\0\340\0\340\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\340\0\70\0\u0ea8\0\u0ee0\0\340\0\u0f18\0\u0f50\0\u0f88"+
    "\0\340\0\340\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\340\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u12d0\0\u1308\0\340\0\u1340\0\340\0\340\0\340"+
    "\0\340\0\u1378\0\340\0\340\0\340\0\u13b0\0\u13e8\0\340"+
    "\0\u1420\0\340\0\u1458\0\u1490\0\340\0\u14c8\0\u1500\0\340"+
    "\0\340\0\u1538\0\u1570\0\u15a8\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\2\1\6\1\2"+
    "\1\7\1\10\1\11\1\5\1\12\1\13\2\5\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\5\1\22\1\5"+
    "\1\23\2\5\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\10\5\1\37\1\5"+
    "\1\40\2\5\1\41\1\5\71\0\2\3\70\0\1\42"+
    "\1\43\70\0\2\5\2\0\25\5\12\0\20\5\2\6"+
    "\1\0\4\6\1\44\1\45\57\6\5\0\2\5\2\0"+
    "\1\5\1\46\23\5\12\0\20\5\5\0\2\5\2\0"+
    "\21\5\1\47\3\5\12\0\20\5\5\0\2\5\2\0"+
    "\11\5\1\50\13\5\12\0\20\5\5\0\2\5\2\0"+
    "\14\5\1\51\10\5\12\0\20\5\5\0\2\5\2\0"+
    "\6\5\1\52\1\5\1\53\14\5\12\0\20\5\5\0"+
    "\2\5\2\0\1\54\24\5\12\0\20\5\5\0\2\5"+
    "\2\0\16\5\1\55\1\56\5\5\12\0\20\5\5\0"+
    "\2\5\2\0\13\5\1\57\1\5\1\60\1\5\1\61"+
    "\5\5\12\0\20\5\5\0\2\5\2\0\10\5\1\62"+
    "\1\63\13\5\12\0\20\5\5\0\2\5\2\0\3\5"+
    "\1\64\21\5\12\0\20\5\5\0\2\5\2\0\3\5"+
    "\1\65\10\5\1\66\1\5\1\67\6\5\12\0\20\5"+
    "\5\0\2\5\2\0\21\5\1\70\3\5\12\0\20\5"+
    "\5\0\2\5\2\0\2\5\1\71\11\5\1\72\6\5"+
    "\1\73\1\5\12\0\20\5\36\0\1\74\36\0\2\5"+
    "\2\0\25\5\12\0\1\5\1\75\16\5\5\0\2\5"+
    "\2\0\25\5\12\0\12\5\1\76\5\5\5\0\2\5"+
    "\2\0\25\5\12\0\14\5\1\77\3\5\5\0\2\5"+
    "\2\0\25\5\12\0\17\5\1\100\2\42\1\0\65\42"+
    "\4\43\1\101\63\43\2\6\1\0\65\6\5\0\2\5"+
    "\2\0\2\5\1\102\22\5\12\0\20\5\5\0\2\5"+
    "\2\0\11\5\1\103\13\5\12\0\20\5\5\0\2\5"+
    "\2\0\1\5\1\104\23\5\12\0\20\5\5\0\2\5"+
    "\2\0\17\5\1\105\5\5\12\0\20\5\5\0\2\5"+
    "\2\0\7\5\1\106\15\5\12\0\20\5\5\0\2\5"+
    "\2\0\4\5\1\107\20\5\12\0\20\5\5\0\2\5"+
    "\2\0\1\110\11\5\1\111\12\5\12\0\20\5\5\0"+
    "\2\5\2\0\24\5\1\112\12\0\20\5\5\0\2\5"+
    "\2\0\5\5\1\113\17\5\12\0\20\5\5\0\2\5"+
    "\2\0\1\114\1\115\23\5\12\0\20\5\5\0\2\5"+
    "\2\0\1\5\1\116\23\5\12\0\20\5\5\0\2\5"+
    "\2\0\13\5\1\117\11\5\12\0\20\5\5\0\2\5"+
    "\2\0\1\5\1\120\23\5\12\0\20\5\5\0\2\5"+
    "\2\0\17\5\1\121\5\5\12\0\20\5\5\0\2\5"+
    "\2\0\2\5\1\122\22\5\12\0\20\5\5\0\2\5"+
    "\2\0\14\5\1\123\10\5\12\0\20\5\5\0\2\5"+
    "\2\0\12\5\1\124\12\5\12\0\20\5\5\0\2\5"+
    "\2\0\11\5\1\125\13\5\12\0\20\5\5\0\2\5"+
    "\2\0\14\5\1\126\10\5\12\0\20\5\5\0\2\5"+
    "\2\0\1\5\1\127\23\5\12\0\20\5\5\0\2\5"+
    "\2\0\25\5\12\0\2\5\1\130\15\5\5\0\2\5"+
    "\2\0\25\5\12\0\15\5\1\131\2\5\3\43\1\132"+
    "\1\101\63\43\5\0\2\5\2\0\3\5\1\133\6\5"+
    "\1\134\12\5\12\0\20\5\5\0\2\5\2\0\17\5"+
    "\1\135\5\5\12\0\20\5\5\0\2\5\2\0\3\5"+
    "\1\136\21\5\12\0\20\5\5\0\2\5\2\0\1\5"+
    "\1\137\23\5\12\0\20\5\5\0\2\5\2\0\6\5"+
    "\1\140\16\5\12\0\20\5\5\0\2\5\2\0\11\5"+
    "\1\141\13\5\12\0\20\5\5\0\2\5\2\0\15\5"+
    "\1\142\7\5\12\0\20\5\5\0\2\5\2\0\14\5"+
    "\1\143\10\5\12\0\20\5\5\0\2\5\2\0\1\5"+
    "\1\144\23\5\12\0\20\5\5\0\2\5\2\0\4\5"+
    "\1\145\20\5\12\0\20\5\5\0\2\5\2\0\22\5"+
    "\1\146\2\5\12\0\20\5\5\0\2\5\2\0\10\5"+
    "\1\147\14\5\12\0\20\5\5\0\2\5\2\0\16\5"+
    "\1\150\6\5\12\0\20\5\5\0\2\5\2\0\10\5"+
    "\1\151\14\5\12\0\20\5\5\0\2\5\2\0\16\5"+
    "\1\152\6\5\12\0\20\5\5\0\2\5\2\0\11\5"+
    "\1\153\13\5\12\0\20\5\5\0\2\5\2\0\25\5"+
    "\12\0\3\5\1\154\14\5\5\0\2\5\2\0\4\5"+
    "\1\155\20\5\12\0\20\5\5\0\2\5\2\0\17\5"+
    "\1\156\5\5\12\0\20\5\5\0\2\5\2\0\2\5"+
    "\1\157\22\5\12\0\20\5\5\0\2\5\2\0\12\5"+
    "\1\160\12\5\12\0\20\5\5\0\2\5\2\0\10\5"+
    "\1\161\14\5\12\0\20\5\5\0\2\5\2\0\2\5"+
    "\1\162\22\5\12\0\20\5\5\0\2\5\2\0\10\5"+
    "\1\163\14\5\12\0\20\5\5\0\2\5\2\0\21\5"+
    "\1\164\3\5\12\0\20\5\5\0\2\5\2\0\11\5"+
    "\1\165\13\5\12\0\20\5\5\0\2\5\2\0\1\5"+
    "\1\166\23\5\12\0\20\5\5\0\2\5\2\0\11\5"+
    "\1\167\13\5\12\0\20\5\5\0\2\5\2\0\6\5"+
    "\1\170\16\5\12\0\20\5\5\0\2\5\2\0\1\171"+
    "\24\5\12\0\20\5\5\0\2\5\2\0\25\5\12\0"+
    "\4\5\1\172\13\5\5\0\2\5\2\0\1\5\1\173"+
    "\23\5\12\0\20\5\5\0\2\5\2\0\7\5\1\174"+
    "\15\5\12\0\20\5\5\0\2\5\2\0\17\5\1\175"+
    "\5\5\12\0\20\5\5\0\2\5\2\0\17\5\1\176"+
    "\5\5\12\0\20\5\5\0\2\5\2\0\7\5\1\177"+
    "\15\5\12\0\20\5\5\0\2\5\2\0\1\5\1\200"+
    "\23\5\12\0\20\5\5\0\2\5\2\0\17\5\1\201"+
    "\5\5\12\0\20\5\5\0\2\5\2\0\2\5\1\202"+
    "\22\5\12\0\20\5\5\0\2\5\2\0\25\5\12\0"+
    "\1\5\1\203\16\5\5\0\2\5\2\0\3\5\1\204"+
    "\21\5\12\0\20\5\5\0\2\5\2\0\11\5\1\205"+
    "\13\5\12\0\20\5\5\0\2\5\2\0\4\5\1\206"+
    "\20\5\12\0\20\5\5\0\2\5\2\0\25\5\12\0"+
    "\5\5\1\207\12\5\5\0\2\5\2\0\11\5\1\210"+
    "\13\5\12\0\20\5\5\0\2\5\2\0\11\5\1\211"+
    "\13\5\12\0\20\5\5\0\2\5\2\0\25\5\12\0"+
    "\6\5\1\212\11\5\5\0\2\5\2\0\25\5\12\0"+
    "\7\5\1\213\10\5\5\0\2\5\2\0\25\5\12\0"+
    "\10\5\1\214\7\5\5\0\2\5\2\0\25\5\12\0"+
    "\1\215\17\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\11\11\5\1\1\0\1\11\1\0"+
    "\26\1\1\11\4\1\1\0\30\1\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CharjLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CharjLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 49: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 50: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 52: break;
          case 5: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 53: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 54: break;
          case 7: 
            { return SEMICOLON;
            } 
            // fall through
          case 55: break;
          case 8: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 56: break;
          case 9: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 57: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 58: break;
          case 11: 
            { return EQUAL;
            } 
            // fall through
          case 59: break;
          case 12: 
            { return DOLLAR;
            } 
            // fall through
          case 60: break;
          case 13: 
            { return QUOTA;
            } 
            // fall through
          case 61: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 62: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 63: break;
          case 16: 
            { return COMMENT;
            } 
            // fall through
          case 64: break;
          case 17: 
            { return AS_KEYWORD;
            } 
            // fall through
          case 65: break;
          case 18: 
            { return IF_KEYWORD;
            } 
            // fall through
          case 66: break;
          case 19: 
            { return IN_KEYWORD;
            } 
            // fall through
          case 67: break;
          case 20: 
            { return DOUBLE_COLON;
            } 
            // fall through
          case 68: break;
          case 21: 
            { return IN;
            } 
            // fall through
          case 69: break;
          case 22: 
            { return GT;
            } 
            // fall through
          case 70: break;
          case 23: 
            { return PKG_KEYWORD;
            } 
            // fall through
          case 71: break;
          case 24: 
            { return END_KEYWORD;
            } 
            // fall through
          case 72: break;
          case 25: 
            { return INT_KEYWORD;
            } 
            // fall through
          case 73: break;
          case 26: 
            { return OUT_KEYWORD;
            } 
            // fall through
          case 74: break;
          case 27: 
            { return FUN_KEYWORD;
            } 
            // fall through
          case 75: break;
          case 28: 
            { return FOR_KEYWORD;
            } 
            // fall through
          case 76: break;
          case 29: 
            { return SUB;
            } 
            // fall through
          case 77: break;
          case 30: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 78: break;
          case 31: 
            { return THEN_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 32: 
            { return ELSE_KEYWORD;
            } 
            // fall through
          case 80: break;
          case 33: 
            { return ELIF_KEYWORD;
            } 
            // fall through
          case 81: break;
          case 34: 
            { return BOOL_KEYWORD;
            } 
            // fall through
          case 82: break;
          case 35: 
            { return MATCH_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 36: 
            { return FLOAT_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 37: 
            { return WHILE_KEYWORD;
            } 
            // fall through
          case 85: break;
          case 38: 
            { return BREAK_KEYWORD;
            } 
            // fall through
          case 86: break;
          case 39: 
            { return BYTES_KEYWORD;
            } 
            // fall through
          case 87: break;
          case 40: 
            { return STRUCT_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 41: 
            { return STRING_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 42: 
            { return RETURN_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 43: 
            { return IMPORT_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 44: 
            { return MEMBER_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 45: 
            { return PACKAGE_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 46: 
            { return CONTINUE_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 47: 
            { return INSTANCE_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 48: 
            { return DEF_KEYWORD;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
