{
  parserClass="com.phodal.charj.parser.CharjParser"
  parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"
  psiImplUtilClass="com.phodal.charj.parser.CharjPsiImplUtil"

  implements="com.phodal.charj.psi.CharjPsiCompositeElement"
  extends="com.phodal.charj.psi.impl.CharjPsiCompositeElementImpl"

  psiClassPrefix="Charj"
  psiImplClassSuffix="Impl"
  psiPackage="com.phodal.charj.psi"
  psiImplPackage="com.phodal.charj.psi.impl"

  elementTypeHolderClass="com.phodal.charj.lexer.CharjTypes"
  elementTypeClass="com.phodal.charj.psi.CharjElementType"
  tokenTypeClass="com.phodal.charj.lexer.CharjTokenType"

  tokenTypeClass="com.phodal.charj.lexer.CharjTokenType"
  tokens = [
      COMMENT          = 'regexp://[^\r\n]*'
      BLOCK_COMMENT    = 'regexp:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]'

      IDENTIFIER       = 'regexp:[_a-zA-Z][_a-zA-Z0-9]*'
      STRING_LITERAL   ="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"

      STRUCT_KEYWORD   ='struct'
      PKG_KEYWORD      ='pkg'
      PACKAGE_KEYWORD  ='package'

      IMPORT_KEYWORD   ='import'
      AS_KEYWORD       ='as'

      IF_KEYWORD       ='if'
      ELSE_KEYWORD     ='else'
      FUN_KEYWORD      ='fun'
      WHILE_KEYWORD    ='while'
      FOR_KEYWORD      ='for'
      BREAK_KEYWORD    ='break'
      CONTINUE_KEYWORD ='continue'
      RETURN_KEYWORD   ='return'

      INT_KEYWORD      ='int'
      FLOAT_KEYWORD    ='float'
      STRING_KEYWORD   ='string'
      OUT_KEYWORD      ='out'
      MEMBER_KEYWORD   ='member'
      IN_KEYWORD       ='in'
      INSTANCE_KEYWORD ='instance'
      MATCH_KEYWORD    ='match'

      ELIF_KEYWORD     ='elif'
      THEN_KEYWORD     ='then'
      END_KEYWORD      ='end'

      COLON          = ":"
      DOUBLE_COLON   = "::"
      SEMICOLON      = ";"
      SLASH          = "/"
      OPEN_BRACE     = "{"
      CLOSE_BRACE    = "}"
      COMMA          = ","
      EQUAL          = "="
      DOLLAR         = "$"
      QUOTA          = "'"
      LPAREN         = '('
      RPAREN         = ')'
  ]
}

compilationUnit ::= headers structDeclaration* structMethodDeclaration* memberDeclaration? { pin = 1}

headers ::= packageDeclaration importDeclaration?

packageDeclaration ::= (PACKAGE_KEYWORD | PKG_KEYWORD) package_name

importDeclaration ::=
    IMPORT_KEYWORD import
    | IMPORT_KEYWORD "(" import (COMMA import)? ")"

import ::= qualified_name

structDeclaration ::=
   DEF_KEYWORD? STRUCT_KEYWORD structNameDeclaration OPEN_BRACE memberDeclaration* CLOSE_BRACE
{
  mixin="com.phodal.charj.psi.impl.CharjNamedElementImpl"
  implements="com.phodal.charj.psi.CharjNamedElement"
  methods=[getName]
}

structMethodDeclaration ::= FUN_KEYWORD? structNameDeclaration DOLLAR functionDefineName functionParameters OPEN_BRACE memberDeclaration* CLOSE_BRACE
{
  mixin="com.phodal.charj.psi.impl.CharjNamedElementImpl"
  implements="com.phodal.charj.psi.CharjNamedElement"
  methods=[getName]
}

functionParameters ::=
    LPAREN inputParameters? RPAREN outputParameters?
    | IN SUB GT inputParameters

inputParameters ::= parameter (COMMA parameter)?

outputParameters ::=
  OUT_KEYWORD parameter (COMMA parameter)?
 | SUB GT parameter (COMMA parameter)?

parameter ::= parameterType IDENTIFIER

parameterType ::=
    primitive_type
  | IDENTIFIER

memberDeclaration ::=
   DEF_KEYWORD? MEMBER_KEYWORD? structNameDeclaration COLON primitive_type
  | exprDeclaration

primitive_type ::=
      INT_KEYWORD
  | FLOAT_KEYWORD
  | STRING_KEYWORD
  | name_component

exprDeclaration ::=
    functionName variableDeclaration COMMA variableDeclaration
  | primitive_type variableDeclaration EQUAL
  | method_call

private method_call ::= name_component "." name_component "(" expressionList ")"
private expressionList ::= expression (',' expression)*

private expression ::= STRING_LITERAL

variableDeclaration ::= name_component
functionName ::= name_component
functionDefineName ::= name_component
structNameDeclaration ::= name_component

package_name ::= qualified_name { name = 'package name' }

qualified_name ::= name_component ("." name_component)*

name_component ::= IDENTIFIER
{
  mixin="com.phodal.charj.psi.impl.CharjNamedElementImpl"
  implements="com.phodal.charj.psi.CharjNamedElement"

  methods=[
    getReference
  ]
}

